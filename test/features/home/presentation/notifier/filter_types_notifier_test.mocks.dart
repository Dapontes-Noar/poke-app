// Mocks generated by Mockito 5.4.6 from annotations
// in poke_app/test/features/home/presentation/notifier/filter_types_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:poke_app/features/home/data/models/all_types_response.dart'
    as _i3;
import 'package:poke_app/features/home/domain/repositories/home_repository.dart'
    as _i2;
import 'package:poke_app/features/home/domain/usecases/get_all_types_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAllTypesResponse_1 extends _i1.SmartFake
    implements _i3.AllTypesResponse {
  _FakeAllTypesResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllTypesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTypesUseCase extends _i1.Mock
    implements _i4.GetAllTypesUseCase {
  MockGetAllTypesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeHomeRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.HomeRepository);

  @override
  _i5.Future<_i3.AllTypesResponse> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i3.AllTypesResponse>.value(
              _FakeAllTypesResponse_1(this, Invocation.method(#call, [])),
            ),
          )
          as _i5.Future<_i3.AllTypesResponse>);
}
